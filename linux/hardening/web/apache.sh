#!/usr/bin/env bash

# Global Apache hardening helpers

function configure_apache_htaccess {
    print_banner "Configuring Apache Global Security Policy"

    local webroot=""
    if [ -d "/var/www/html/web" ]; then
        webroot="/var/www/html/web"
    elif [ -d "/var/www/html" ]; then
        webroot="/var/www/html"
    elif [ -d "/var/www" ]; then
        webroot="/var/www"
    else
        log_error "No Apache web root found."
        return 1
    fi

    local conf_dir="" conf_file="" apachectl="" service_name=""
    if [ -d "/etc/apache2" ]; then
        conf_dir="/etc/apache2/conf-available"
        conf_file="${conf_dir}/zz-ccdc-security.conf"
        apachectl="apache2ctl"
        service_name="apache2"
    elif [ -d "/etc/httpd" ]; then
        conf_dir="/etc/httpd/conf.d"
        conf_file="${conf_dir}/zz-ccdc-security.conf"
        apachectl="apachectl"
        service_name="httpd"
    else
        log_error "Apache configuration directory not found (expected /etc/apache2 or /etc/httpd)."
        return 1
    fi

    sudo mkdir -p "$conf_dir"

    if command -v a2enmod &>/dev/null; then
        sudo a2enmod rewrite >/dev/null 2>&1 || true
        sudo a2enmod headers >/dev/null 2>&1 || true
    else
        log_info "Ensure the 'rewrite' and 'headers' modules are enabled in Apache."
    fi

    local marker_start="### CCDC HARDENING START"
    local marker_end="### CCDC HARDENING END"
    local tmpfile
    tmpfile="$(mktemp)"

    cat <<EOT >"$tmpfile"
${marker_start}
# Generated by configure_apache_htaccess on $(date -u +"%Y-%m-%dT%H:%M:%SZ")
# Global Apache security configuration managed by the CCDC toolkit

ServerSignature Off
ServerTokens Prod

<Directory "${webroot}">
    AllowOverride None
    Options -Indexes

    <IfModule mod_autoindex.c>
        IndexIgnore *
    </IfModule>

    <IfModule mod_rewrite.c>
        RewriteEngine On
        RewriteCond %{REQUEST_METHOD} !^(GET|POST|HEAD)$ [NC]
        RewriteCond %{HTTP_USER_AGENT} "(dirbuster|nikto|sqlmap|nessus|openvas|jbrofuzz|w3af\\.sourceforge\\.net|libwhisker|webshag|fimap)" [NC]
        RewriteRule .* - [F,L]
    </IfModule>

    <IfModule mod_headers.c>
        Header always set X-Content-Type-Options "nosniff"
        Header always set X-Frame-Options "DENY"
        Header always set X-XSS-Protection "1; mode=block"
        Header always set Referrer-Policy "strict-origin-when-cross-origin"
        Header always set Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()"
        Header always set Content-Security-Policy "default-src 'self'; base-uri 'self'; frame-ancestors 'none'; form-action 'self'"
        Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
        Header always set X-Permitted-Cross-Domain-Policies "none"
        Header always set Cross-Origin-Resource-Policy "same-origin"
        Header always set Cross-Origin-Embedder-Policy "require-corp"
        Header always set Cross-Origin-Opener-Policy "same-origin"
    </IfModule>
</Directory>

${marker_end}
EOT

    if sudo test -f "$conf_file"; then
        if sudo cmp -s "$tmpfile" "$conf_file"; then
            log_info "Apache security configuration already up to date at $conf_file"
            rm -f "$tmpfile"
        else
            local backup
            backup="${conf_file}.bak.$(date +%Y%m%d_%H%M%S)"
            sudo cp "$conf_file" "$backup"
            log_info "Existing configuration saved to $backup"
            sudo install -m 0644 "$tmpfile" "$conf_file"
            rm -f "$tmpfile"
            log_success "Updated Apache security configuration at $conf_file"
        fi
    else
        sudo install -m 0644 "$tmpfile" "$conf_file"
        rm -f "$tmpfile"
        log_success "Wrote Apache security configuration to $conf_file"
    fi

    if [ "$conf_dir" == "/etc/apache2/conf-available" ] && command -v a2enconf &>/dev/null; then
        sudo a2enconf zz-ccdc-security >/dev/null 2>&1 || true
    fi

    if command -v "$apachectl" &>/dev/null; then
        if sudo "$apachectl" configtest; then
            log_success "Apache configuration test passed."
        else
            log_error "Apache configuration test failed. Please review $conf_file before reloading."
            return 1
        fi
    else
        log_warning "$apachectl not found; unable to run configuration test automatically."
    fi

    local reloaded="false"
    if command -v systemctl &>/dev/null; then
        if sudo systemctl reload "$service_name"; then
            reloaded="true"
            log_success "Reloaded $service_name via systemctl."
        fi
    fi

    if [ "$reloaded" != "true" ]; then
        if sudo service "$service_name" reload >/dev/null 2>&1; then
            reloaded="true"
            log_success "Reloaded $service_name via service command."
        fi
    fi

    if [ "$reloaded" != "true" ]; then
        log_warning "Unable to automatically reload $service_name. Please reload it manually."
    fi
}

function install_apache_user_agent_blocker {
    print_banner "Installing Apache User-Agent Blocker"

    local script_path
    script_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/install-apache-ua-block.sh"

    if [ ! -f "$script_path" ]; then
        log_error "Installer script not found at $script_path"
        return 1
    fi

    if [ ! -x "$script_path" ]; then
        chmod +x "$script_path"
    fi

    if [ "$EUID" -ne 0 ]; then
        sudo "$script_path"
    else
        "$script_path"
    fi
}
